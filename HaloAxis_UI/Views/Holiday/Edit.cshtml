@model HaloAxis_UI.Models.HolidayFormVm
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery AF

@{
    var isEdit = !string.IsNullOrWhiteSpace(Model?.Id);
    ViewData["Title"] = isEdit ? "Edit Holiday List" : "New Holiday List";
}

<a asp-action="Index" class="text-decoration-none mb-3 d-inline-flex align-items-center">&larr; Back</a>
<h3 class="mb-4">@ViewData["Title"]</h3>

<form asp-action="@((isEdit) ? "Edit" : "Create")" asp-route-id="@Model?.Id" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" id="__af" value="@AF.GetAndStoreTokens(Context).RequestToken" />
    <div asp-validation-summary="All" class="text-danger mb-2"></div>

    <div class="row g-4">
        <div class="col-md-6">
            <label class="form-label">Holiday List Name</label>
            <input asp-for="Name" class="form-control" required />
        </div>
        <div class="col-md-6">
            <label class="form-label">Color</label>
            <input asp-for="Color" class="form-control" placeholder="#5B5FF5" />
        </div>

        <div class="col-md-6">
            <label class="form-label">From Date</label>
            <input asp-for="FromDate" type="date" class="form-control" required />
        </div>
        <div class="col-md-6">
            <label class="form-label">To Date</label>
            <input asp-for="ToDate" type="date" class="form-control" required />
        </div>
    </div>

    <div class="row mt-4 g-4">
        <!-- WEEKLY HOLIDAYS -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title d-flex align-items-center justify-content-between">
                        <span>Add Weekly Holidays</span>
                        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#weeklyBox">Toggle</button>
                    </h5>
                    <div id="weeklyBox" class="collapse show">
                        <div class="input-group mb-3">
                            <select id="weeklyDay" class="form-select">
                                <option value="">Week day</option>
                                <option>Sunday</option>
                                <option>Monday</option>
                                <option>Tuesday</option>
                                <option>Wednesday</option>
                                <option>Thursday</option>
                                <option>Friday</option>
                                <option>Saturday</option>
                            </select>
                            <button id="btnAddWeeklyDay" type="button" class="btn btn-outline-primary">+</button>
                        </div>
                        <div id="weeklyChosen" class="d-flex flex-wrap gap-2"></div>
                        <div class="mt-3">
                            <button id="btnGenerateWeekends" type="button" class="btn btn-secondary">Add to List</button>
                            <small class="text-muted ms-2">Generates all dates in range matching selected weekdays as Weekend rows.</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- LOCAL HOLIDAYS -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title d-flex align-items-center justify-content-between">
                        <span>Add Local Holidays</span>
                        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#localBox">Toggle</button>
                    </h5>
                    <div id="localBox" class="collapse show">
                        <div class="row g-2">
                            <div class="col-12">
                                <label class="form-label">Country</label>
                                <select id="countrySelect" asp-for="Country" class="form-select">
                                    <option value="">Select Country</option>
                                    <option value="Bangladesh">Bangladesh</option>
                                    <option value="India">India</option>
                                    <option value="Pakistan">Pakistan</option>
                                    <option value="United States">United States</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Canada">Canada</option>
                                    <option value="Australia">Australia</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label">State / Region</label>
                                <input asp-for="State" class="form-control" placeholder="State/Region" />
                            </div>
                        </div>
                        <div class="mt-3">
                            <button id="btnAddEmpty" type="button" class="btn btn-outline-primary">Add empty row</button>
                            <button id="btnClearRows" type="button" class="btn btn-outline-danger">Clear rows</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- HOLIDAY ROWS TABLE -->
    <div class="card mt-4">
        <div class="card-body">
            <div class="d-flex align-items-center justify-content-between mb-2">
                <h5 class="card-title mb-0">Holiday Rows</h5>
                <div class="form-check">
                    <input asp-for="IsActive" class="form-check-input" />
                    <label asp-for="IsActive" class="form-check-label"></label>
                </div>
            </div>

            <table class="table" id="rowsTable">
                <thead>
                    <tr>
                        <th style="width:90px">No</th>
                        <th style="width:190px">Date</th>
                        <th style="width:180px">Type</th>
                        <th>Description</th>
                        <th style="width:80px"></th>
                    </tr>
                </thead>
                <tbody id="rowsBody">
                    @for (var i = 0; i < Model.Lines.Count; i++)
                    {
                        <tr>
                            <td><span class="row-idx">@(i + 1)</span></td>
                            <td><input name="Lines[@i].Date" value="@Model.Lines[i].Date" type="date" class="form-control" /></td>
                            <td>
                                <select name="Lines[@i].Type" class="form-select">
                                    <option value="0" selected="@(Model.Lines[i].Type==0)">Weekend</option>
                                    <option value="1" selected="@(Model.Lines[i].Type==1)">Local</option>
                                </select>
                            </td>
                            <td><input name="Lines[@i].Description" value="@Model.Lines[i].Description" class="form-control" /></td>
                            <td class="text-end"><button type="button" class="btn btn-sm btn-outline-danger btnDelRow">&times;</button></td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex gap-2">
                <button id="btnAddRow" type="button" class="btn btn-light">Add New Row</button>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end gap-2 mt-4">
        <a asp-action="Index" class="btn btn-light">Cancel</a>
        <button class="btn btn-primary">Save</button>
    </div>
</form>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        const weeklyChosen = document.getElementById('weeklyChosen');
        const weeklyDay = document.getElementById('weeklyDay');
        const tbody = document.getElementById('rowsBody');

        // --- Add selected weekday badge ---
        document.getElementById('btnAddWeeklyDay').addEventListener('click', () => {
            const v = weeklyDay.value;
            if (!v) return;
            if ([...weeklyChosen.querySelectorAll('input')].some(i => i.value === v)) return;

            const chip = document.createElement('span');
            chip.className = 'badge rounded-pill text-bg-secondary px-3 py-2';
            chip.style.cursor = 'pointer';
            chip.textContent = v + ' ×';

            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.name = 'WeeklyOffDays';
            hidden.value = v;

            chip.appendChild(hidden);
            chip.addEventListener('click', () => chip.remove());
            weeklyChosen.appendChild(chip);
            weeklyDay.value = '';
        });

        // --- Add new row ---
        function addRow(date = '', type = '0', desc = '') {
            const i = tbody.querySelectorAll('tr').length;
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td><span class="row-idx">${i + 1}</span></td>
                <td><input name="Lines[${i}].Date" type="date" class="form-control" value="${date}" required></td>
                <td>
                    <select name="Lines[${i}].Type" class="form-select">
                        <option value="0" ${type == 0 ? 'selected' : ''}>Weekend</option>
                        <option value="1" ${type == 1 ? 'selected' : ''}>Local</option>
                    </select>
                </td>
                <td><input name="Lines[${i}].Description" class="form-control" value="${desc}" required></td>
                <td class="text-end"><button type="button" class="btn btn-sm btn-outline-danger btnDelRow">&times;</button></td>`;
            tbody.appendChild(tr);
        }

        // --- Re-number inputs ---
        function renumber() {
            [...tbody.querySelectorAll('tr')].forEach((tr, i) => {
                tr.querySelector('.row-idx').textContent = i + 1;
                tr.querySelectorAll('input, select').forEach(el => {
                    if (el.name) el.name = el.name.replace(/Lines\[\d+\]/, `Lines[${i}]`);
                });
            });
        }

        // --- Highlight weekend rows ---
        function highlightWeekends() {
            [...tbody.querySelectorAll('tr')].forEach(tr => {
                const desc = tr.querySelector('input[name$=".Description"]').value?.toLowerCase();
                const typeSel = tr.querySelector('select[name$=".Type"]').value;
                const isWeekend = typeSel === "0";

                if (isWeekend && /(friday|saturday|sunday)/.test(desc)) {
                    tr.style.backgroundColor = '#f7faff';
                } else if (isWeekend) {
                    tr.style.backgroundColor = '#fafbff';
                } else {
                    tr.style.backgroundColor = '';
                }
            });
        }

        // --- Sort rows by date ascending ---
        function sortRowsByDate() {
            const rows = [...tbody.querySelectorAll('tr')];
            rows.sort((a, b) => {
                const dateA = new Date(a.querySelector('input[type="date"]').value);
                const dateB = new Date(b.querySelector('input[type="date"]').value);
                return dateA - dateB;
            });
            tbody.innerHTML = '';
            rows.forEach(r => tbody.appendChild(r));
            renumber();
            highlightWeekends();
        }

        // --- Buttons ---
        document.getElementById('btnAddRow').addEventListener('click', () => { addRow(); sortRowsByDate(); });
        document.getElementById('btnAddEmpty').addEventListener('click', () => { addRow(); sortRowsByDate(); });
        document.getElementById('btnClearRows').addEventListener('click', () => { if (confirm('Clear all rows?')) tbody.innerHTML = ''; });

        // --- Delete Row ---
        tbody.addEventListener('click', (e) => {
            const btn = e.target.closest('.btnDelRow');
            if (!btn) return;
            if (confirm('Delete this row?')) {
                btn.closest('tr').remove();
                sortRowsByDate();
            }
        });

        // --- Auto resort on manual edit ---
        tbody.addEventListener('change', (e) => {
            if (e.target.matches('input[type="date"], input[name$=".Description"], select[name$=".Type"]')) {
                sortRowsByDate();
            }
        });

        // --- Generate weekend rows automatically ---
        document.getElementById('btnGenerateWeekends').addEventListener('click', () => {
            const from = document.querySelector('input[name="FromDate"]').value;
            const to = document.querySelector('input[name="ToDate"]').value;
            if (!from || !to) { alert('Please select both From and To dates.'); return; }

            const selectedDays = [...weeklyChosen.querySelectorAll('input')].map(i => i.value);
            if (selectedDays.length === 0) { alert('Please select at least one weekly off day.'); return; }

            const start = new Date(from);
            const end = new Date(to);
            const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

            for (const dName of selectedDays) {
                const targetDay = daysOfWeek.indexOf(dName);
                let current = new Date(start);
                while (current.getDay() !== targetDay) current.setDate(current.getDate() + 1);

                while (current <= end) {
                    const ymd = current.toISOString().split('T')[0];
                    if (![...tbody.querySelectorAll('input[type="date"]')].some(x => x.value === ymd)) {
                        addRow(ymd, 0, dName);
                    }
                    current.setDate(current.getDate() + 7);
                }
            }

            sortRowsByDate();
        });

               // --- Add local government holidays by country ---
        document.getElementById('countrySelect').addEventListener('change', async (e) => {
            const country = e.target.value;
            const from = document.querySelector('input[name="FromDate"]').value;
            const to = document.querySelector('input[name="ToDate"]').value;
            if (!country || !from || !to) { alert('Please select country and From/To dates first.'); return; }

            const start = new Date(from);
            const end = new Date(to);
            const yearStart = start.getFullYear();
            const yearEnd = end.getFullYear();

            // Supported country codes (Nager.Date)
            const countryCodes = {
                "India": "IN",
                "Pakistan": "PK",
                "United States": "US",
                "United Kingdom": "GB",
                "Canada": "CA",
                "Australia": "AU"
            };

            let holidays = [];

            // ---- CASE 1: Bangladesh (Custom Static Fallback) ----
            if (country === "Bangladesh") {
                const bdHolidays = [
                    { date: `${yearStart}-02-21`, name: "Shaheed Day & International Mother Language Day" },
                    { date: `${yearStart}-03-17`, name: "Sheikh Mujibur Rahman’s Birthday" },
                    { date: `${yearStart}-03-26`, name: "Independence Day" },
                    { date: `${yearStart}-05-01`, name: "May Day" },
                    { date: `${yearStart}-08-15`, name: "National Mourning Day" },
                    { date: `${yearStart}-12-16`, name: "Victory Day" },
                    { date: `${yearStart}-12-25`, name: "Christmas Day" }
                ];
                holidays = bdHolidays.filter(h => {
                    const d = new Date(h.date);
                    return d >= start && d <= end;
                });
            }

            // ---- CASE 2: Other countries using Nager API ----
            else if (countryCodes[country]) {
                const code = countryCodes[country];
                try {
                    // Handle ranges spanning multiple years
                    for (let y = yearStart; y <= yearEnd; y++) {
                        const resp = await fetch(`https://date.nager.at/api/v3/PublicHolidays/${y}/${code}`);
                        if (!resp.ok) continue;
                        const data = await resp.json();
                        holidays.push(...data.filter(h => {
                            const d = new Date(h.date);
                            return d >= start && d <= end;
                        }));
                    }
                } catch (err) {
                    console.error("Error fetching from Nager API:", err);
                    alert("Failed to load public holidays.");
                }
            }

            // ---- Add Holidays to Table ----
            if (holidays.length === 0) {
                alert(`No public holidays found for ${country} in selected range.`);
                return;
            }

            let added = 0;
            for (const h of holidays) {
                const ymd = h.date;
                if (![...tbody.querySelectorAll('input[type="date"]')].some(x => x.value === ymd)) {
                    addRow(ymd, 1, h.localName || h.name);
                    added++;
                }
            }

            sortRowsByDate();
            highlightWeekends();
            alert(`${added} public holidays added for ${country}.`);
        });

    </script>
}
